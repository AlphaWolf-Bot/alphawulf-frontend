{"ast":null,"code":"import React,{useState}from'react';import styled from'styled-components';import Header from'../components/Header';import Navigation from'../components/Navigation';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const EarnContainer=styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  padding-bottom: 60px; /* Space for navigation */\n`;const Content=styled.div`\n  flex: 1;\n  padding: ${props=>props.theme.spacing.md};\n`;const TaskCard=styled.div`\n  background-color: ${props=>props.theme.colors.secondaryBg};\n  border-radius: ${props=>props.theme.borderRadius.medium};\n  border: 1px solid ${props=>props.theme.colors.secondaryAccent};\n  padding: ${props=>props.theme.spacing.md};\n  margin-bottom: ${props=>props.theme.spacing.md};\n  display: flex;\n  flex-direction: column;\n`;const TaskHeader=styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: ${props=>props.theme.spacing.sm};\n`;const TaskTitle=styled.h3`\n  font-family: ${props=>props.theme.fonts.secondary};\n  font-size: 1.1rem;\n  margin: 0;\n  color: ${props=>props.theme.colors.accent};\n`;const TaskReward=styled.span`\n  font-family: ${props=>props.theme.fonts.primary};\n  font-size: 0.9rem;\n  color: ${props=>props.theme.colors.textSecondary};\n`;const TaskDescription=styled.p`\n  font-size: 0.9rem;\n  margin-bottom: ${props=>props.theme.spacing.md};\n  color: ${props=>props.theme.colors.textSecondary};\n`;const TaskButton=styled.button`\n  align-self: flex-end;\n  opacity: ${props=>props.completed?0.5:1};\n  cursor: ${props=>props.completed?'default':'pointer'};\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: default;\n  }\n`;const CompletedBadge=styled.div`\n  background-color: ${props=>props.theme.colors.success};\n  color: white;\n  font-size: 0.8rem;\n  padding: ${props=>props.theme.spacing.xs} ${props=>props.theme.spacing.sm};\n  border-radius: ${props=>props.theme.borderRadius.small};\n  margin-left: ${props=>props.theme.spacing.sm};\n`;const SectionTitle=styled.h2`\n  font-family: ${props=>props.theme.fonts.secondary};\n  font-size: 1.3rem;\n  margin: ${props=>props.theme.spacing.md} 0;\n  color: ${props=>props.theme.colors.accent};\n`;const EarnPage=()=>{const[tasks,setTasks]=useState([{id:1,title:'Follow on Twitter',description:'Follow Alpha Wulf on Twitter to earn coins.',reward:50,completed:false,url:'https://twitter.com/alphawulf'},{id:2,title:'Subscribe on YouTube',description:'Subscribe to Alpha Wulf channel on YouTube.',reward:50,completed:false,url:'https://youtube.com/alphawulf'},{id:3,title:'Join Telegram Group',description:'Join the official Alpha Wulf Telegram group.',reward:50,completed:false,url:'https://t.me/alphawulf'},{id:4,title:'Follow on Instagram',description:'Follow Alpha Wulf on Instagram to earn coins.',reward:50,completed:false,url:'https://instagram.com/alphawulf'}]);const handleCompleteTask=taskId=>{// In a real app, this would verify task completion with the backend\nsetTasks(tasks.map(task=>task.id===taskId?{...task,completed:true}:task));// Call API to update user data and add coins\n// This will be implemented when backend is ready\n};const openTaskUrl=url=>{// In Telegram WebApp, we would use Telegram-specific methods\n// For now, just open in a new tab\nwindow.open(url,'_blank');};return/*#__PURE__*/_jsxs(EarnContainer,{children:[/*#__PURE__*/_jsx(Header,{title:\"EARN\",showBack:true}),/*#__PURE__*/_jsxs(Content,{children:[/*#__PURE__*/_jsx(SectionTitle,{children:\"Social Media Tasks\"}),tasks.map(task=>/*#__PURE__*/_jsxs(TaskCard,{children:[/*#__PURE__*/_jsxs(TaskHeader,{children:[/*#__PURE__*/_jsx(TaskTitle,{children:task.title}),/*#__PURE__*/_jsxs(TaskReward,{children:[task.reward,\" coins\"]})]}),/*#__PURE__*/_jsx(TaskDescription,{children:task.description}),task.completed?/*#__PURE__*/_jsx(CompletedBadge,{children:\"Completed\"}):/*#__PURE__*/_jsx(TaskButton,{onClick:()=>{openTaskUrl(task.url);// In a real implementation, we would verify completion\n// For now, just mark as completed when clicked\nhandleCompleteTask(task.id);},children:\"COMPLETE TASK\"})]},task.id))]}),/*#__PURE__*/_jsx(Navigation,{activePage:\"EARN\"})]});};export default EarnPage;","map":{"version":3,"names":["React","useState","styled","Header","Navigation","jsx","_jsx","jsxs","_jsxs","EarnContainer","div","Content","props","theme","spacing","md","TaskCard","colors","secondaryBg","borderRadius","medium","secondaryAccent","TaskHeader","sm","TaskTitle","h3","fonts","secondary","accent","TaskReward","span","primary","textSecondary","TaskDescription","p","TaskButton","button","completed","CompletedBadge","success","xs","small","SectionTitle","h2","EarnPage","tasks","setTasks","id","title","description","reward","url","handleCompleteTask","taskId","map","task","openTaskUrl","window","open","children","showBack","onClick","activePage"],"sources":["C:/Users/vilas/Desktop/Manus/alphawulf/frontend/src/pages/EarnPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Header from '../components/Header';\nimport Navigation from '../components/Navigation';\n\nconst EarnContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  padding-bottom: 60px; /* Space for navigation */\n`;\n\nconst Content = styled.div`\n  flex: 1;\n  padding: ${props => props.theme.spacing.md};\n`;\n\nconst TaskCard = styled.div`\n  background-color: ${props => props.theme.colors.secondaryBg};\n  border-radius: ${props => props.theme.borderRadius.medium};\n  border: 1px solid ${props => props.theme.colors.secondaryAccent};\n  padding: ${props => props.theme.spacing.md};\n  margin-bottom: ${props => props.theme.spacing.md};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TaskHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst TaskTitle = styled.h3`\n  font-family: ${props => props.theme.fonts.secondary};\n  font-size: 1.1rem;\n  margin: 0;\n  color: ${props => props.theme.colors.accent};\n`;\n\nconst TaskReward = styled.span`\n  font-family: ${props => props.theme.fonts.primary};\n  font-size: 0.9rem;\n  color: ${props => props.theme.colors.textSecondary};\n`;\n\nconst TaskDescription = styled.p`\n  font-size: 0.9rem;\n  margin-bottom: ${props => props.theme.spacing.md};\n  color: ${props => props.theme.colors.textSecondary};\n`;\n\nconst TaskButton = styled.button`\n  align-self: flex-end;\n  opacity: ${props => props.completed ? 0.5 : 1};\n  cursor: ${props => props.completed ? 'default' : 'pointer'};\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: default;\n  }\n`;\n\nconst CompletedBadge = styled.div`\n  background-color: ${props => props.theme.colors.success};\n  color: white;\n  font-size: 0.8rem;\n  padding: ${props => props.theme.spacing.xs} ${props => props.theme.spacing.sm};\n  border-radius: ${props => props.theme.borderRadius.small};\n  margin-left: ${props => props.theme.spacing.sm};\n`;\n\nconst SectionTitle = styled.h2`\n  font-family: ${props => props.theme.fonts.secondary};\n  font-size: 1.3rem;\n  margin: ${props => props.theme.spacing.md} 0;\n  color: ${props => props.theme.colors.accent};\n`;\n\nconst EarnPage = () => {\n  const [tasks, setTasks] = useState([\n    {\n      id: 1,\n      title: 'Follow on Twitter',\n      description: 'Follow Alpha Wulf on Twitter to earn coins.',\n      reward: 50,\n      completed: false,\n      url: 'https://twitter.com/alphawulf'\n    },\n    {\n      id: 2,\n      title: 'Subscribe on YouTube',\n      description: 'Subscribe to Alpha Wulf channel on YouTube.',\n      reward: 50,\n      completed: false,\n      url: 'https://youtube.com/alphawulf'\n    },\n    {\n      id: 3,\n      title: 'Join Telegram Group',\n      description: 'Join the official Alpha Wulf Telegram group.',\n      reward: 50,\n      completed: false,\n      url: 'https://t.me/alphawulf'\n    },\n    {\n      id: 4,\n      title: 'Follow on Instagram',\n      description: 'Follow Alpha Wulf on Instagram to earn coins.',\n      reward: 50,\n      completed: false,\n      url: 'https://instagram.com/alphawulf'\n    }\n  ]);\n  \n  const handleCompleteTask = (taskId) => {\n    // In a real app, this would verify task completion with the backend\n    setTasks(tasks.map(task => \n      task.id === taskId ? { ...task, completed: true } : task\n    ));\n    \n    // Call API to update user data and add coins\n    // This will be implemented when backend is ready\n  };\n  \n  const openTaskUrl = (url) => {\n    // In Telegram WebApp, we would use Telegram-specific methods\n    // For now, just open in a new tab\n    window.open(url, '_blank');\n  };\n  \n  return (\n    <EarnContainer>\n      <Header title=\"EARN\" showBack={true} />\n      \n      <Content>\n        <SectionTitle>Social Media Tasks</SectionTitle>\n        \n        {tasks.map(task => (\n          <TaskCard key={task.id}>\n            <TaskHeader>\n              <TaskTitle>{task.title}</TaskTitle>\n              <TaskReward>{task.reward} coins</TaskReward>\n            </TaskHeader>\n            <TaskDescription>{task.description}</TaskDescription>\n            {task.completed ? (\n              <CompletedBadge>Completed</CompletedBadge>\n            ) : (\n              <TaskButton \n                onClick={() => {\n                  openTaskUrl(task.url);\n                  // In a real implementation, we would verify completion\n                  // For now, just mark as completed when clicked\n                  handleCompleteTask(task.id);\n                }}\n              >\n                COMPLETE TASK\n              </TaskButton>\n            )}\n          </TaskCard>\n        ))}\n      </Content>\n      \n      <Navigation activePage=\"EARN\" />\n    </EarnContainer>\n  );\n};\n\nexport default EarnPage;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,MAAO,CAAAC,MAAM,KAAM,sBAAsB,CACzC,MAAO,CAAAC,UAAU,KAAM,0BAA0B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAElD,KAAM,CAAAC,aAAa,CAAGP,MAAM,CAACQ,GAAG;AAChC;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,OAAO,CAAGT,MAAM,CAACQ,GAAG;AAC1B;AACA,aAAaE,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,OAAO,CAACC,EAAE;AAC5C,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAGd,MAAM,CAACQ,GAAG;AAC3B,sBAAsBE,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACI,MAAM,CAACC,WAAW;AAC7D,mBAAmBN,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACM,YAAY,CAACC,MAAM;AAC3D,sBAAsBR,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACI,MAAM,CAACI,eAAe;AACjE,aAAaT,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,OAAO,CAACC,EAAE;AAC5C,mBAAmBH,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,OAAO,CAACC,EAAE;AAClD;AACA;AACA,CAAC,CAED,KAAM,CAAAO,UAAU,CAAGpB,MAAM,CAACQ,GAAG;AAC7B;AACA;AACA;AACA,mBAAmBE,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,OAAO,CAACS,EAAE;AAClD,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGtB,MAAM,CAACuB,EAAE;AAC3B,iBAAiBb,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACa,KAAK,CAACC,SAAS;AACrD;AACA;AACA,WAAWf,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACI,MAAM,CAACW,MAAM;AAC7C,CAAC,CAED,KAAM,CAAAC,UAAU,CAAG3B,MAAM,CAAC4B,IAAI;AAC9B,iBAAiBlB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACa,KAAK,CAACK,OAAO;AACnD;AACA,WAAWnB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACI,MAAM,CAACe,aAAa;AACpD,CAAC,CAED,KAAM,CAAAC,eAAe,CAAG/B,MAAM,CAACgC,CAAC;AAChC;AACA,mBAAmBtB,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,OAAO,CAACC,EAAE;AAClD,WAAWH,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACI,MAAM,CAACe,aAAa;AACpD,CAAC,CAED,KAAM,CAAAG,UAAU,CAAGjC,MAAM,CAACkC,MAAM;AAChC;AACA,aAAaxB,KAAK,EAAIA,KAAK,CAACyB,SAAS,CAAG,GAAG,CAAG,CAAC;AAC/C,YAAYzB,KAAK,EAAIA,KAAK,CAACyB,SAAS,CAAG,SAAS,CAAG,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,cAAc,CAAGpC,MAAM,CAACQ,GAAG;AACjC,sBAAsBE,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACI,MAAM,CAACsB,OAAO;AACzD;AACA;AACA,aAAa3B,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,OAAO,CAAC0B,EAAE,IAAI5B,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,OAAO,CAACS,EAAE;AAC/E,mBAAmBX,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACM,YAAY,CAACsB,KAAK;AAC1D,iBAAiB7B,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,OAAO,CAACS,EAAE;AAChD,CAAC,CAED,KAAM,CAAAmB,YAAY,CAAGxC,MAAM,CAACyC,EAAE;AAC9B,iBAAiB/B,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACa,KAAK,CAACC,SAAS;AACrD;AACA,YAAYf,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACC,OAAO,CAACC,EAAE;AAC3C,WAAWH,KAAK,EAAIA,KAAK,CAACC,KAAK,CAACI,MAAM,CAACW,MAAM;AAC7C,CAAC,CAED,KAAM,CAAAgB,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAG7C,QAAQ,CAAC,CACjC,CACE8C,EAAE,CAAE,CAAC,CACLC,KAAK,CAAE,mBAAmB,CAC1BC,WAAW,CAAE,6CAA6C,CAC1DC,MAAM,CAAE,EAAE,CACVb,SAAS,CAAE,KAAK,CAChBc,GAAG,CAAE,+BACP,CAAC,CACD,CACEJ,EAAE,CAAE,CAAC,CACLC,KAAK,CAAE,sBAAsB,CAC7BC,WAAW,CAAE,6CAA6C,CAC1DC,MAAM,CAAE,EAAE,CACVb,SAAS,CAAE,KAAK,CAChBc,GAAG,CAAE,+BACP,CAAC,CACD,CACEJ,EAAE,CAAE,CAAC,CACLC,KAAK,CAAE,qBAAqB,CAC5BC,WAAW,CAAE,8CAA8C,CAC3DC,MAAM,CAAE,EAAE,CACVb,SAAS,CAAE,KAAK,CAChBc,GAAG,CAAE,wBACP,CAAC,CACD,CACEJ,EAAE,CAAE,CAAC,CACLC,KAAK,CAAE,qBAAqB,CAC5BC,WAAW,CAAE,+CAA+C,CAC5DC,MAAM,CAAE,EAAE,CACVb,SAAS,CAAE,KAAK,CAChBc,GAAG,CAAE,iCACP,CAAC,CACF,CAAC,CAEF,KAAM,CAAAC,kBAAkB,CAAIC,MAAM,EAAK,CACrC;AACAP,QAAQ,CAACD,KAAK,CAACS,GAAG,CAACC,IAAI,EACrBA,IAAI,CAACR,EAAE,GAAKM,MAAM,CAAG,CAAE,GAAGE,IAAI,CAAElB,SAAS,CAAE,IAAK,CAAC,CAAGkB,IACtD,CAAC,CAAC,CAEF;AACA;AACF,CAAC,CAED,KAAM,CAAAC,WAAW,CAAIL,GAAG,EAAK,CAC3B;AACA;AACAM,MAAM,CAACC,IAAI,CAACP,GAAG,CAAE,QAAQ,CAAC,CAC5B,CAAC,CAED,mBACE3C,KAAA,CAACC,aAAa,EAAAkD,QAAA,eACZrD,IAAA,CAACH,MAAM,EAAC6C,KAAK,CAAC,MAAM,CAACY,QAAQ,CAAE,IAAK,CAAE,CAAC,cAEvCpD,KAAA,CAACG,OAAO,EAAAgD,QAAA,eACNrD,IAAA,CAACoC,YAAY,EAAAiB,QAAA,CAAC,oBAAkB,CAAc,CAAC,CAE9Cd,KAAK,CAACS,GAAG,CAACC,IAAI,eACb/C,KAAA,CAACQ,QAAQ,EAAA2C,QAAA,eACPnD,KAAA,CAACc,UAAU,EAAAqC,QAAA,eACTrD,IAAA,CAACkB,SAAS,EAAAmC,QAAA,CAAEJ,IAAI,CAACP,KAAK,CAAY,CAAC,cACnCxC,KAAA,CAACqB,UAAU,EAAA8B,QAAA,EAAEJ,IAAI,CAACL,MAAM,CAAC,QAAM,EAAY,CAAC,EAClC,CAAC,cACb5C,IAAA,CAAC2B,eAAe,EAAA0B,QAAA,CAAEJ,IAAI,CAACN,WAAW,CAAkB,CAAC,CACpDM,IAAI,CAAClB,SAAS,cACb/B,IAAA,CAACgC,cAAc,EAAAqB,QAAA,CAAC,WAAS,CAAgB,CAAC,cAE1CrD,IAAA,CAAC6B,UAAU,EACT0B,OAAO,CAAEA,CAAA,GAAM,CACbL,WAAW,CAACD,IAAI,CAACJ,GAAG,CAAC,CACrB;AACA;AACAC,kBAAkB,CAACG,IAAI,CAACR,EAAE,CAAC,CAC7B,CAAE,CAAAY,QAAA,CACH,eAED,CAAY,CACb,GAnBYJ,IAAI,CAACR,EAoBV,CACX,CAAC,EACK,CAAC,cAEVzC,IAAA,CAACF,UAAU,EAAC0D,UAAU,CAAC,MAAM,CAAE,CAAC,EACnB,CAAC,CAEpB,CAAC,CAED,cAAe,CAAAlB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}