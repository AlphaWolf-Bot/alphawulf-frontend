{"ast":null,"code":"import React,{useState,useEffect}from'react';import styled from'styled-components';import Header from'../components/Header';import Navigation from'../components/Navigation';import ProgressBar from'../components/ProgressBar';import TapToCoin from'../components/TapToCoin';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const HomeContainer=styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  padding-bottom: 60px; /* Space for navigation */\n`;const Content=styled.div`\n  flex: 1;\n  padding: ${props=>props.theme.spacing.md};\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;const HomePage=()=>{const[userData,setUserData]=useState({level:5,experience:65,maxExperience:100,coins:1250,remainingTaps:78,maxTaps:100,lastTapReset:new Date().getTime()});// Check if taps should be reset (every 4 hours)\nuseEffect(()=>{const checkTapReset=()=>{const now=new Date().getTime();const fourHoursInMs=4*60*60*1000;if(now-userData.lastTapReset>fourHoursInMs){setUserData(prev=>({...prev,remainingTaps:prev.maxTaps,lastTapReset:now}));}};checkTapReset();const interval=setInterval(checkTapReset,60000);// Check every minute\nreturn()=>clearInterval(interval);},[userData.lastTapReset]);const handleTap=()=>{if(userData.remainingTaps>0){setUserData(prev=>({...prev,coins:prev.coins+5,remainingTaps:prev.remainingTaps-1,experience:Math.min(prev.maxExperience,prev.experience+1)}));// Call API to update user data\n// This will be implemented when backend is ready\n}};return/*#__PURE__*/_jsxs(HomeContainer,{children:[/*#__PURE__*/_jsx(Header,{title:\"ALPHA WULF\",showBack:false}),/*#__PURE__*/_jsxs(Content,{children:[/*#__PURE__*/_jsx(ProgressBar,{current:userData.experience,max:userData.maxExperience,level:userData.level}),/*#__PURE__*/_jsx(TapToCoin,{onTap:handleTap,remainingTaps:userData.remainingTaps,maxTaps:userData.maxTaps})]}),/*#__PURE__*/_jsx(Navigation,{activePage:\"HOME\"})]});};export default HomePage;","map":{"version":3,"names":["React","useState","useEffect","styled","Header","Navigation","ProgressBar","TapToCoin","jsx","_jsx","jsxs","_jsxs","HomeContainer","div","Content","props","theme","spacing","md","HomePage","userData","setUserData","level","experience","maxExperience","coins","remainingTaps","maxTaps","lastTapReset","Date","getTime","checkTapReset","now","fourHoursInMs","prev","interval","setInterval","clearInterval","handleTap","Math","min","children","title","showBack","current","max","onTap","activePage"],"sources":["C:/Users/vilas/Desktop/Manus/alphawulf/frontend/src/pages/HomePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Header from '../components/Header';\nimport Navigation from '../components/Navigation';\nimport ProgressBar from '../components/ProgressBar';\nimport TapToCoin from '../components/TapToCoin';\n\nconst HomeContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  padding-bottom: 60px; /* Space for navigation */\n`;\n\nconst Content = styled.div`\n  flex: 1;\n  padding: ${props => props.theme.spacing.md};\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst HomePage = () => {\n  const [userData, setUserData] = useState({\n    level: 5,\n    experience: 65,\n    maxExperience: 100,\n    coins: 1250,\n    remainingTaps: 78,\n    maxTaps: 100,\n    lastTapReset: new Date().getTime()\n  });\n  \n  // Check if taps should be reset (every 4 hours)\n  useEffect(() => {\n    const checkTapReset = () => {\n      const now = new Date().getTime();\n      const fourHoursInMs = 4 * 60 * 60 * 1000;\n      \n      if (now - userData.lastTapReset > fourHoursInMs) {\n        setUserData(prev => ({\n          ...prev,\n          remainingTaps: prev.maxTaps,\n          lastTapReset: now\n        }));\n      }\n    };\n    \n    checkTapReset();\n    const interval = setInterval(checkTapReset, 60000); // Check every minute\n    \n    return () => clearInterval(interval);\n  }, [userData.lastTapReset]);\n  \n  const handleTap = () => {\n    if (userData.remainingTaps > 0) {\n      setUserData(prev => ({\n        ...prev,\n        coins: prev.coins + 5,\n        remainingTaps: prev.remainingTaps - 1,\n        experience: Math.min(prev.maxExperience, prev.experience + 1)\n      }));\n      \n      // Call API to update user data\n      // This will be implemented when backend is ready\n    }\n  };\n  \n  return (\n    <HomeContainer>\n      <Header title=\"ALPHA WULF\" showBack={false} />\n      \n      <Content>\n        <ProgressBar \n          current={userData.experience} \n          max={userData.maxExperience} \n          level={userData.level} \n        />\n        \n        <TapToCoin \n          onTap={handleTap} \n          remainingTaps={userData.remainingTaps} \n          maxTaps={userData.maxTaps} \n        />\n      </Content>\n      \n      <Navigation activePage=\"HOME\" />\n    </HomeContainer>\n  );\n};\n\nexport default HomePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}